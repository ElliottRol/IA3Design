@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using IA3Digital.Shared

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider



<h1>Weather forecast</h1>

<!-- AuthorizeView allows us to only show sections of the page -->
<!-- based on the security on the current user -->

<AuthorizeView>

    <!-- Show this section if the user is logged in -->

    <Authorized>
        @if (forecasts == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <!-- Show the forecasts for the current user -->
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var f in forecasts)
                    {
                        <tr>
                            <td>@((f.Date != null)? f.Date.Value.ToShortDateString() : "") </td>
                            <td>@f.TemperatureC</td>
                            <td>@f.TemperatureF</td>
                            <td>@f.Summary</td>
                            <td>
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary"
                                @onclick="(()=>EditForecast(f))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
                <!-- Add a new forecast -->
                <button class="btn btn-primary"
                    @onclick="AddNewForecast">
                    Add New Forecast
                </button>
            </p>
            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a forecast -->
                <div class="modal" tabindex="-1" style="display:block"
                     role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Forecast</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current forecast -->
                            <div class="modal-body">
                                <input class="form-control" type="text" placeholder="Celsius forecast" @bind="forecast.TemperatureC" />
                                <input class="form-control" type="text" placeholder="Fahrenheit forecast" @bind="forecast.TemperatureF" />
                                <input class="form-control" type="text" placeholder="Summary" @bind="forecast.Summary" />
                                <br />
                                <!-- Button to save the forecast -->
                                <button class="btn btn-primary" @onclick="SaveForecast">
                                    Save
                                </button>
                                <!-- Only show button if not a new record -->
                                @if (forecast.Id > 0)
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-primary" @onclick="DeleteForecast">
                                        Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </Authorized>
    <!-- Show this section if the user is not logged in -->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
<PageTitle>Weather forecast</PageTitle>

@code {

    #nullable disable
        // This passes authentication to the control
        // to allow us to determine the current user
        // This can be 'altered' by a user so we do
        // not trust this value in server side code
        [CascadingParameter]
        private Task<AuthenticationState>
            authenticationStateTask{ get; set; }

    // Stores the forecasts displayed in a list
    private List<TableDTO> forecasts;

    // Stores a single forecast
    TableDTO forecast = new TableDTO();

    // Controls if the popup is displayed
    bool ShowPopup = false;

    // First method to run when user navicates to this control
    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                // Make a call to get the forecasts
                // we don't pass the user because the server
                // side code will determine who the user is
                // from the authentication cookie
                forecasts = await Http.GetFromJsonAsync<List<TableDTO>>("/api/WeatherForecast/");
            }
        }
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewForecast()
    {
        // Make new forecast
        forecast = new TableDTO();

        // Set Id to 0 so we know it is a new record
        forecast.Id = 0;

        // Open the Popup
        ShowPopup = true;
    }

    async Task SaveForecast()
    {
        // Close the Popup
        ShowPopup = false;

        // Get the current user
        var user = (await authenticationStateTask).User;

        // A new forecast will have the Id set to 0
        if (forecast.Id == 0)
        {
            // Create new forecast
            TableDTO newForecast = new TableDTO();

            newForecast.Date = System.DateTime.Now;
            newForecast.Summary = forecast.Summary;
            newForecast.TemperatureC = Convert.ToInt32(forecast.TemperatureC);
            newForecast.TemperatureF = Convert.ToInt32(forecast.TemperatureF);

            // Username will be set server side
            newForecast.UserName = "";

            // Save the result
            await Http.PostAsJsonAsync("/api/WeatherForecast", newForecast);
        }
        else
        {
            // This is an update
            await Http.PutAsJsonAsync(
                "/api/WeatherForecast",
                forecast);
        }

        // Get the forecasts for the current user
        forecasts = await Http.GetFromJsonAsync<List<TableDTO>>("/api/WeatherForecast/");
    }

    void EditForecast(TableDTO forceastToEdit)
    {
        // Set the selected forecast
        // as the current forecast
        forecast = forceastToEdit;

        // Open the Popup
        ShowPopup = true;
    }

    async Task DeleteForecast()
    {
        // Close the Popup
        ShowPopup = false;

        // Delete the forecast
        await Http.DeleteAsync($"/api/WeatherForecast/{forecast.Id}");

        // Get the forecasts for the current user
        forecasts = await Http.GetFromJsonAsync<List<TableDTO>>("/api/WeatherForecast/");
    }
}